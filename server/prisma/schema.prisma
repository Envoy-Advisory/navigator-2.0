generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(255)
  subscription_type String   @default("basic") @db.VarChar(50)
  settings          Json     @default("{}")
  created_at        DateTime @default(now())
  users             User[]

  @@map("organizations")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  email           String        @unique @db.VarChar(255)
  password        String        @db.VarChar(255)
  role            String        @default("employer") @db.VarChar(50)
  organization_id Int?
  created_at      DateTime      @default(now())
  last_login      DateTime?
  organization    Organization? @relation(fields: [organization_id], references: [id])

  @@map("users")
}

model Module {
  id           Int       @id @default(autoincrement())
  moduleNumber Int
  moduleName   String    @db.VarChar(255)
  created_at   DateTime  @default(now())
  articles     Article[]

  @@map("modules")
}

model Article {
  id          Int      @id @default(autoincrement())
  moduleId    Int
  articleName String   @db.VarChar(255)
  content     String
  created_at  DateTime @default(now())
  position    Int?     @default(0)
  updated_at  DateTime @default(now()) @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("articles")
}

model File {
  id           Int       @id @default(autoincrement())
  filename     String    @db.VarChar(255)
  originalName String    @db.VarChar(255)
  mimeType     String    @db.VarChar(100)
  size         Int
  data         Bytes
  uploadedBy   Int?
  created_at   DateTime? @default(now()) @db.Timestamp(6)

  @@index([filename], map: "idx_files_filename")
  @@index([uploadedBy], map: "idx_files_uploaded_by")
  @@map("files")
}
